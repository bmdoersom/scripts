/* ---------------------------------------
- Description: This script will create
- the directory structure required for
- AEC when a ITB is awarded on contract
-
- Developer: Brian Doersom
-
- Date: 3 February 2020
----------------------------------------*/

//************
//*** VARS ***
//************

string currYear = year(currentDate());
string currYearAwardDir = "/" + currYear;
string baseDir = "/tmp";
string dirFQP = baseDir;
string [] awardedContractDir = {"/AwardedSalesContracts/", currYearAwardDir};
string contractDirFQP = "/tmp/AwardedSalesContracts/" + currYear;
string originalBidDocDir = "/12.OriginalBidDocuments";

// SysMsg Definitions
string contractAwardSuccessMsg = "SysMsg_S002: Successfully processed contract award folder structure.";
string contractAwardFailMsg = "SysMsg_F002: Failed to process the contract awarded folder structure.";
string myJobDir = customfield_10401;

//*************
//*** FUNCS ***
//*************

function awardedDirAction(){
    
    number awardedDirExitCode;
    
    // Check for the Contracted Awarded Directory Structure
    if(!directoryExists(contractDirFQP)){
    
        // Create the base directory struct if non-existent
        for(string awardDir in #{awardedContractDir}){
                
            dirFQP += awardDir;
            
            if(!directoryExists(dirFQP)){
               
                createDirectory(dirFQP);
               
            } //End of nested if statement
             
        } // End of For Loop
        
        // If the Contracted Awarded Directory Structure
        // failed to create.
        if(!directoryExists(contractDirFQP)){
            
            awardedDirExitCode = 1;
            
        } else {
        
            awardedDirExitCode = 0;
            
        } // End of nested else statement
        
    } else {
        
        awardedDirExitCode = 0;
        
    }//End of if statement
    
    return awardedDirExitCode;
    
} // End of awardedDirAction() Func

function quoteDirAction(){
    
    number quoteDirActionExitCode;

    if(directoryExists(myJobDir))
    {
    
        string bidDocDir = myJobDir + originalBidDocDir;
        
        if (createDirectory(bidDocDir)) {
        
            quoteDirActionExitCode = 0;
            
        } else {
            
            quoteDirActionExitCode = 1;
            
        }// End if Statement
        
    } // End outer if statement
    
    return quoteDirActionExitCode;
    
} // End quoteDirAction() function

function compileDirs(){

    number compileDirsExitCode;
    
    if(directoryExists(myJobDir)){
        
        string [] sysRet = system("/usr/bin/bash /tmp/compileDirs.sh " + jobDir);

        // Create system call to move directory in place
        if (sysRet[0] == "0.0"){
            
            string [] awardedDirs = {"/1.Contract", "/2.Insurance", "/3.Estimates", "/4.RequestedChangeOrders", 
            "/5.ExecutedCOs", "/6.RFIS_PCRs_ASIs", "/7.Subcontracts&POs", "/8.Submittals", "/9.Schedule", "/10.Pics", 
            "/11.CloseoutDocuments", "/13.FieldUseDrawings", "/14.ShopDrawingsInProcess"};
            
            for(string addedDir in #{awardedDirs}){
                
                string jobDirFQP = myJobDir + "/";
                jobDirFQP += addedDir;
            
                if(!directoryExists(jobDirFQP)){
               
                    createDirectory(jobDirFQP);
                    
                }
               
            } //End of nested if statement
            
            compileDirsExitCode = 0;
             
        } else {
            
            compileDirsExitCode = 1;
            
        }
        
    } else {
        
        compileDirsExitCode = 1;
        
    }
    
    return compileDirsExitCode;
        
} //End of compileDirs() Func

function moveDirs(){

    string moveDirsExitCode;
    
    string [] mvRet = system("/usr/bin/bash /tmp/moveDirs.sh " + jobDir);
            
    if (mvRet[0] == "0.0"){
                
        moveDirsExitCode = 0;
                
    } else {
                
        moveDirsExitCode = 1;
                
    } // End of else statement
    
    return moveDirsExitCode;
    
} // End of moveDirs Func

//************
//*** MAIN ***
//************

/*awardedDirAction();
quoteDirAction();
compileDirs();
moveDirs();
*/

if (awardedDirAction() == 0)
{
    
    if (quoteDirAction() == 0)
    {
        
        if(compileDirs() == 0)
        {
            
            if(moveDirs() == 0)
            {
                
                addComment(key, currentUser(), contractAwardSuccessMsg);
                
            } else {
                
                addComment(key, currentUser(), "Move Dirs broke me");
                
            } // End of else statement
            
        } else {
            
            addComment(key, currentUser(), "Compile Dirs broke me");
            
        } // End of else statement
        
    } else {
        
        addComment(key, currentUser(), "Quote Dir Action Broke Me");
        
    } // End of else statement
    
} else {
    
    addComment(key, currentUser(), "Award Dir Action Broke Me");

} // End of else statement





